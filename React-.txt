Certainly, here's a complete example of a React application that performs CRUD operations using a simple JSON file as the data source. In this example, we will use the json-server library to simulate a RESTful API for a JSON file. You can install json-server using npm or yarn:

bash
Copy code
npm install -g json-server
Now, let's create the React application with full CRUD functionality. We will assume you have a JSON file named db.json that contains an array of objects. The JSON file could look like this:

json
Copy code
// db.json
{
  "data": [
    { "id": 1, "name": "Item 1" },
    { "id": 2, "name": "Item 2" },
    { "id": 3, "name": "Item 3" }
  ]
}
Set up the JSON server to serve the data:
bash
Copy code
json-server --watch db.json --port 3001
Create a React application:
bash
Copy code
npx create-react-app react-crud-app
cd react-crud-app
Install Axios for making HTTP requests:
bash
Copy code
npm install axios
Create a React component that performs CRUD operations:
javascript
Copy code
// src/App.js
import React, { Component } from 'react';
import axios from 'axios';

class App extends Component {
  state = {
    data: [],
    newItem: '',
  };

  componentDidMount() {
    this.fetchData();
  }

  fetchData() {
    axios.get('http://localhost:3001/data')
      .then(response => {
        this.setState({ data: response.data });
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
  }

  addItem = () => {
    axios.post('http://localhost:3001/data', { name: this.state.newItem })
      .then(() => {
        this.setState({ newItem: '' });
        this.fetchData();
      })
      .catch(error => {
        console.error('Error adding data:', error);
      });
  }

  updateItem = (id, newName) => {
    axios.put(`http://localhost:3001/data/${id}`, { name: newName })
      .then(() => {
        this.fetchData();
      })
      .catch(error => {
        console.error('Error updating data:', error);
      });
  }

  deleteItem = (id) => {
    axios.delete(`http://localhost:3001/data/${id}`)
      .then(() => {
        this.fetchData();
      })
      .catch(error => {
        console.error('Error deleting data:', error);
      });
  }

  render() {
    return (
      <div>
        <h1>CRUD App</h1>
        <div>
          <input
            type="text"
            placeholder="New Item"
            value={this.state.newItem}
            onChange={(e) => this.setState({ newItem: e.target.value })}
          />
          <button onClick={this.addItem}>Add</button>
        </div>
        <ul>
          {this.state.data.map(item => (
            <li key={item.id}>
              {item.name}
              <button onClick={() => this.updateItem(item.id, prompt('Enter new name', item.name))}>
                Update
              </button>
              <button onClick={() => this.deleteItem(item.id)}>
                Delete
              </button>
            </li>
          ))}
        </ul>
      </div>
    );
  }
}

export default App;
Start your React app:
bash
Copy code
npm start
Now, you have a complete React application with CRUD functionality. It fetches data from the JSON file, allows you to add new items, update existing items, and delete items using an API created by json-server. This is a basic example, and you can expand it to suit your specific needs.